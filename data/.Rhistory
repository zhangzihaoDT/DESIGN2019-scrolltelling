theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank())
p <- p+
geom_hline(yintercept = 0,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 25,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 50,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 75,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 100, colour = "wheat4", linetype=3, size=.5)
p <- p+
geom_line(mapping=aes(x=time, y=frequency.x/total.x*100),color='orange',size = 2)+
geom_line(mapping=aes(x=time, y=frequency.y/total.y*100),size = 1.2)
print(p)
df1 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_喜茶_负面.csv',header = T,sep = ",")
df2 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_喜茶_正面.csv',header = T,sep = ",")
df <- merge(df1,df2,by = 'time')
df <- mutate(df,time=as.Date(str_remove_all(time,"\t")))%>%
arrange(time)
p <- ggplot(df)+
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank())
p <- p+
geom_hline(yintercept = 0,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 25,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 50,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 75,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 100, colour = "wheat4", linetype=3, size=.5)
p <- p+
geom_line(mapping=aes(x=time, y=frequency.x/total.x*100),color='orange',size = 2)+
geom_line(mapping=aes(x=time, y=frequency.y/total.y*100),size = 1.2)
print(p)
df1 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_小啾啾_负面.csv',header = T,sep = ",")
df2 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_小啾啾_正面.csv',header = T,sep = ",")
df <- merge(df1,df2,by = 'time')
df <- mutate(df,time=as.Date(str_remove_all(time,"\t")))%>%
arrange(time)
p <- ggplot(df)+
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank())
p <- p+
geom_hline(yintercept = 0,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 25,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 50,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 75,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 100, colour = "wheat4", linetype=3, size=.5)
p <- p+
geom_line(mapping=aes(x=time, y=frequency.x/total.x*100),color='orange',size = 2)+
geom_line(mapping=aes(x=time, y=frequency.y/total.y*100),size = 1.2)
print(p)
df <- rbind(df1,df2)
df1 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_小啾啾_负面.csv',header = T,sep = ",")
df1$classify <- c("负面")
df1$classify <- c("负面")
df2 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_小啾啾_正面.csv',header = T,sep = ",")
df <- rbind(df1,df2)
df1$classify <- c("负面")
df2 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_小啾啾_正面.csv',header = T,sep = ",")
df2$classify <- c("正面")
df <- rbind(df1,df2)
df <- mutate(df,time=as.Date(str_remove_all(time,"\t")))%>%
arrange(time)
p <- ggplot(df)+
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank())
p <- p+
geom_hline(yintercept = 0,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 25,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 50,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 75,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 100, colour = "wheat4", linetype=3, size=.5)
p <- p+
geom_line(mapping=aes(x=time, y=frequency/total*100),color=classify,size = 2)
p <- p+
geom_line(mapping=aes(x=time, y=frequency/total*100,color=classify),size = 2)
print(p)
df1 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_小啾啾_负面.csv',header = T,sep = ",")
df2 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_小啾啾_正面.csv',header = T,sep = ",")
df <- merge(df1,df2,by = 'time')
df <- mutate(df,time=as.Date(str_remove_all(time,"\t")))%>%
arrange(time)
p <- ggplot(df)+
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank())
p <- p+
geom_hline(yintercept = 0,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 25,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 50,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 75,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 100, colour = "wheat4", linetype=3, size=.5)
p <- p+
geom_line(mapping=aes(x=time, y=frequency.x/total.x*100),color='orange',size = 2)+
geom_line(mapping=aes(x=time, y=frequency.y/total.y*100),size = 1.2)
print(p)
df1 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_鹿角巷_负面.csv',header = T,sep = ",")
df2 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_鹿角巷_正面.csv',header = T,sep = ",")
df <- merge(df1,df2,by = 'time')
df <- mutate(df,time=as.Date(str_remove_all(time,"\t")))%>%
arrange(time)
p <- ggplot(df)+
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank())
p <- p+
geom_hline(yintercept = 0,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 25,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 50,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 75,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 100, colour = "wheat4", linetype=3, size=.5)
p <- p+
geom_line(mapping=aes(x=time, y=frequency.x/total.x*100),color='orange',size = 2)+
geom_line(mapping=aes(x=time, y=frequency.y/total.y*100),size = 1.2)
print(p)
df1 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_喜茶_负面.csv',header = T,sep = ",")
df2 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_喜茶_正面.csv',header = T,sep = ",")
df <- merge(df1,df2,by = 'time')
df <- mutate(df,time=as.Date(str_remove_all(time,"\t")))%>%
arrange(time)
p <- ggplot(df)+
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank())
p <- p+
geom_hline(yintercept = 0,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 25,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 50,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 75,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 100, colour = "wheat4", linetype=3, size=.5)
p <- p+
geom_line(mapping=aes(x=time, y=frequency.x/total.x*100),color='orange',size = 2)+
geom_line(mapping=aes(x=time, y=frequency.y/total.y*100),size = 1.2)
print(p)
df1 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_乐乐茶_负面.csv',header = T,sep = ",")
df2 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_乐乐茶_正面.csv',header = T,sep = ",")
df <- merge(df1,df2,by = 'time')
df <- mutate(df,time=as.Date(str_remove_all(time,"\t")))%>%
arrange(time)
p <- ggplot(df)+
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank())
p <- p+
geom_hline(yintercept = 0,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 25,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 50,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 75,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 100, colour = "wheat4", linetype=3, size=.5)
p <- p+
geom_line(mapping=aes(x=time, y=frequency.x/total.x*100),color='orange',size = 2)+
geom_line(mapping=aes(x=time, y=frequency.y/total.y*100),size = 1.2)
print(p)
df1 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_乐乐茶_负面.csv',header = T,sep = ",")
df1 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_乐乐茶_负面.csv',header = T,sep = ",")
df2 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_乐乐茶_正面.csv',header = T,sep = ",")
df <- merge(df1,df2,by = 'time')
df <- mutate(df,time=as.Date(str_remove_all(time,"\t")))%>%
arrange(time)
p <- ggplot(df)+
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank())
p <- p+
geom_hline(yintercept = 0,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 25,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 50,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 75,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 100, colour = "wheat4", linetype=3, size=.5)
p <- p+
geom_line(mapping=aes(x=time, y=frequency.x/total.x*100),color='orange',size = 2)+
geom_line(mapping=aes(x=time, y=frequency.y/total.y*100),size = 1.2)
print(p)
df1 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_鹿角巷_负面.csv',header = T,sep = ",")
df2 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_鹿角巷_正面.csv',header = T,sep = ",")
df <- merge(df1,df2,by = 'time')
df <- mutate(df,time=as.Date(str_remove_all(time,"\t")))%>%
arrange(time)
p <- ggplot(df)+
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank())
p <- p+
geom_hline(yintercept = 0,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 25,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 50,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 75,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 100, colour = "wheat4", linetype=3, size=.5)
p <- p+
geom_line(mapping=aes(x=time, y=frequency.x/total.x*100),color='orange',size = 2)+
geom_line(mapping=aes(x=time, y=frequency.y/total.y*100),size = 1.2)
print(p)
df1 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_小啾啾_负面.csv',header = T,sep = ",")
df2 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_小啾啾_正面.csv',header = T,sep = ",")
df <- merge(df1,df2,by = 'time')
df <- mutate(df,time=as.Date(str_remove_all(time,"\t")))%>%
arrange(time)
p <- ggplot(df)+
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank())
p <- p+
geom_hline(yintercept = 0,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 25,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 50,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 75,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 100, colour = "wheat4", linetype=3, size=.5)
p <- p+
geom_line(mapping=aes(x=time, y=frequency.x/total.x*100),color='orange',size = 2)+
geom_line(mapping=aes(x=time, y=frequency.y/total.y*100),size = 1.2)
print(p)
df1 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_乐乐茶_负面.csv',header = T,sep = ",")
df2 <- read.csv('/Users/smg/Desktop/EDA/data/脏脏情感曲线_乐乐茶_正面.csv',header = T,sep = ",")
df <- merge(df1,df2,by = 'time')
df <- mutate(df,time=as.Date(str_remove_all(time,"\t")))%>%
arrange(time)
p <- ggplot(df)+
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank())
p <- p+
geom_hline(yintercept = 0,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 25,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 50,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 75,  colour = "wheat4", linetype=3, size=.5) +
geom_hline(yintercept = 100, colour = "wheat4", linetype=3, size=.5)
p <- p+
geom_line(mapping=aes(x=time, y=frequency.x/total.x*100),color='orange',size = 2)+
geom_line(mapping=aes(x=time, y=frequency.y/total.y*100),size = 1.2)
print(p)
q()
system("python /Users/smg/Desktop/gaode_boundary.py")
system("python /Users/smg/Desktop/gaode_boundary.py")
system("python /Users/smg/Desktop/gaode_boundary.py")
system("python /Users/smg/Desktop/gaode_boundary.py")
SZrankCor<-read.delim('/Applications/XAMPP/xamppfiles/htdocs/d3/Historical-ranking-data-visualization-based-on-d3.js-master/src/TOP500.csv',header = T,sep = ',')
head()
head(SZrankCor)
View(SZrankCor)
Sys.setlocale("LC_ALL", 'en_US.UTF-8')
c="汉字"
c
install.packages('gdata')
require(gdata)
df <- read.xls('/Users/smg/Desktop/EDA/data/wordCloud.xlsx',sheet = 1,header = T,encoding="UTF-8")
df
df <- read.xls('/Users/smg/Desktop/EDA/data/wordCloud.xlsx',sheet = 1,header = T,encoding="UTF-8")
df
install.packages("wordcloud2")
library("wordcloud2")
wordcloud2(df,shape = "circle",size = 0.8,fontFamily = "微软雅黑",hoverFunction = NULL,
#color=rep_len( c("#df6356","#fece3e"), ncol(df) ),
color = ifelse(df[, 3] == 1, "#cc2d25","#fece3e"),
minSize = 5,gridSize = 15)
wordcloud2(df,shape = "circle",size = 0.8,fontFamily = "微软雅黑",hoverFunction = NULL,
#color=rep_len( c("#df6356","#fece3e"), ncol(df) ),
color = ifelse(df[, 3] == 1, "#cc2d25","#fece3e"),
minSize = 5,gridSize = 20)
wordcloud2(df,shape = "circle",size = 1,fontFamily = "微软雅黑",hoverFunction = NULL,
#color=rep_len( c("#df6356","#fece3e"), ncol(df) ),
color = ifelse(df[, 3] == 1, "#cc2d25","#fece3e"),
minSize = 5,gridSize = 20)
wordcloud2(df,shape = "circle",size = 1,fontFamily = "微软雅黑",hoverFunction = NULL,
#color=rep_len( c("#df6356","#fece3e"), ncol(df) ),
color = ifelse(df[, 3] == 1, "#cc2d25","#fece3e"),
minSize = 4,gridSize = 20)
wordcloud2(df,shape = "circle",size = 1,fontFamily = "微软雅黑",hoverFunction = NULL,
#color=rep_len( c("#cfc4e1","#7d65ae"), ncol(df) ),
color = ifelse(df[, 3] == 1, "#cfc4e1","#7d65ae"),
minSize = 4,gridSize = 20)
library(ggplot2)
wordcloud2(df,shape = "circle",size = 1,fontFamily = "微软雅黑",hoverFunction = NULL,
#color=rep_len( c("#cfc4e1","#7d65ae"), ncol(df) ),
color = ifelse(df[, 3] == 1, "#cfc4e1","#7d65ae"),
minSize = 4,gridSize = 20)
wordcloud2(df,shape = "circle",size = 1,fontFamily = "微软雅黑",hoverFunction = NULL,
#color=rep_len( c("#cfc4e1","#7d65ae"), ncol(df) ),
color = ifelse(df[, 3] == 1, "#7d65ae","#cfc4e1"),
minSize = 4,gridSize = 20)
wordcloud2(df,shape = "circle",size = 1,fontFamily = "微软雅黑",hoverFunction = NULL,
#color=rep_len( c("#cfc4e1","#7d65ae"), ncol(df) ),
color = ifelse(df[, 3] == 1, "#7d65ae","#cfc4e1"),
minSize = 4,gridSize = 20)
wordcloud2(df,shape = "cardioid",size = 1,fontFamily = "微软雅黑",hoverFunction = NULL,
#color=rep_len( c("#cfc4e1","#7d65ae"), ncol(df) ),
color = ifelse(df[, 3] == 1, "#7d65ae","#cfc4e1"),
minSize = 4,gridSize = 20)
wordcloud2(df,shape = "cardioid",size = 1,fontFamily = "微软雅黑",hoverFunction = NULL,
#color=rep_len( c("#cfc4e1","#7d65ae"), ncol(df) ),
color = ifelse(df[, 3] == 1, "#7d65ae","#cfc4e1"),
minSize = 4,gridSize = 20)
library(ggplot2)
library(ggmap)
wordcloud2(df,shape = "cardioid",size = 1,fontFamily = "微软雅黑",hoverFunction = NULL,
#color=rep_len( c("#cfc4e1","#7d65ae"), ncol(df) ),
color = ifelse(df[, 3] == 1, "#7d65ae","#cfc4e1"),
minSize = 4,gridSize = 20)
Sys.setlocale("LC_ALL", 'en_US.UTF-8')
c="汉字"
c
install.packages('gdata')
require(gdata)
df <- read.xls('/Users/smg/Desktop/EDA/data/wordCloud.xlsx',sheet = 1,header = T,encoding="UTF-8")
df
library("wordcloud2")
wordcloud2(df,shape = "cardioid",size = 1,fontFamily = "微软雅黑",hoverFunction = NULL,
#color=rep_len( c("#cfc4e1","#7d65ae"), ncol(df) ),
color = ifelse(df[, 3] == 1, "#7d65ae","#cfc4e1"),
minSize = 4,gridSize = 20)
wordcloud2(df,shape = "cardioid",size = 1,fontFamily = "微软雅黑",hoverFunction = NULL,
#color=rep_len( c("#cfc4e1","#39bda0"), ncol(df) ),
color = ifelse(df[, 3] == 1, "#7d65ae","#cfc4e1"),
minSize = 4,gridSize = 20)
wordcloud2(df,shape = "cardioid",size = 1,fontFamily = "微软雅黑",hoverFunction = NULL,
#color=rep_len( c("#cfc4e1","#39bda0"), ncol(df) ),
color = ifelse(df[, 3] == 1, "#7d65ae","#39bda0"),
minSize = 4,gridSize = 20)
wordcloud2(df,shape = "cardioid",size = 1,fontFamily = "微软雅黑",hoverFunction = NULL,
#color=rep_len( c("#cfc4e1","#39bda0"), ncol(df) ),
color = ifelse(df[, 3] == 1, "#39bda0","#cadca2"),
minSize = 4,gridSize = 20)
library(ggplot2)
library(ggmap)
library(ggplot2)
library(ggmap)
us <- c(left = -125, bottom = 25.75, right = -67, top = 49)
map <- get_stamenmap(us, zoom = 5, maptype = "toner-lite")
ggmap(map)
ggmap(map, extent = "device")
downtown <- subset(crime,
-95.39681 <= lon & lon <= -95.34188 &
29.73631 <= lat & lat <=  29.78400
)
qmplot(lon, lat, data = downtown, maptype = "toner-background", color = I("red"))
qmap(location = 'amsterdam', zoom = 12)
osm <- get_openstreetmap(urlonly = TRUE)
qmap(location = 'beijing',zoom = 12,color = 'bw',source = 'osm')
robberies <- subset(downtown, offense == "robbery")
qmplot(lon, lat, data = downtown, geom = "blank", zoom = 15, maptype = "toner-background", darken = .7) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", alpha = .3, color = NA) +
scale_fill_gradient2("Robbery\nPropensity", low = "white", mid = "yellow", high = "red", midpoint = 1500)
qmplot(lon, lat, data = downtown, maptype = "toner-background", color = offense) +
facet_wrap(~ offense)
europe <- c(left = -12, bottom = 35, right = 30, top = 63)
map <- get_stamenmap(europe, zoom = 5, maptype = "toner-lite")
ggmap(map)
qmap(location = 'beijing', zoom = 12, maptype = "toner-background",source = 'stamen')
dataSZ <- read.delim('/Users/smg/Desktop/EDA/data/new-nestAnalysis.csv',header = T,sep = ',')
head(dataSZ,10)
dim(dataSZ)
str(dataSZ)
range(dataSZ$level2)
library(ggplot2)
ggplot(aes(x=latitude,y=longitude),data = dataSZ)+
geom_point(aes(color = dataSZ$level1))
p<-ggplot(dataSZ,aes(latitude,longitude))+
theme(plot.background = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
#axis.text = element_blank(),
axis.title = element_blank()) +
geom_point(dataSZ,mapping = aes(x=latitude,y=longitude),color = dataSZ$level1,alpha=1)
print(p)
ggplot(aes(x = rank),data = dataSZ)+
geom_histogram(aes(fill=live_level),bins = 30)+
scale_fill_brewer(type = 'qual')+
facet_wrap(~level2,ncol=3)
freData<- read.delim('/Users/smg/Desktop/EDA/data/histogram.csv',header = T,sep = ',')
head(freData)
hist(freData)
hist(freData, breaks = 0.1, col = "lightblue", border = "pink")
View(freData)
hist(freData$Frequency, breaks = 0.1, col = "lightblue", border = "pink")
hist(freData$Frequency, breaks = 30, col = "lightblue", border = "pink")
hist(freData$Frequency, breaks = 50, col = "lightblue", border = "pink")
hist(freData$Frequency, breaks = 50, col = "lightblue", border = "pink")
hist(freData$Frequency, breaks = 100, col = "lightblue", border = "pink")
head(freData)
hist(freData$Frequency, breaks = 100, col = "lightblue", border = "pink")
hist(freData$Frequency, breaks = 30, col = "lightblue", border = "pink")
# 首先找出工作目录的设置位置：
getwd()
#更改返回的路径
setwd("/Users/smg/Desktop/volat-economy-scrollmagic/data/")
# 首先找出工作目录的设置位置：
getwd()
PEK_TSN_flights <- read.csv("PEK_TSN_flights.csv",encoding ="UTF-8",stringsAsFactors = FALSE,header = T)
View(PEK_TSN_flights)
library(jsonlite)
json_data <- toJSON(PEK_TSN_flights, pretty = TRUE,force=TRUE)
writeLines(json_data, "PEK_TSN_flights.json")
View(PEK_TSN_flights)
PEK_TSN_flights[, c(6:9)] <- sapply(my_data[, c(6:9)], as.numeric)
PEK_TSN_flights[, c(6:9)] <- sapply(PEK_TSN_flights[, c(6:9)], as.numeric)
summary(PEK_TSN_flights)
#去除NA
PEK_TSN_flights[PEK_TSN_flights == "NA"]  <- NA
summary(PEK_TSN_flights)
PEK_TSN_flights <- na.omit(PEK_TSN_flights)
summary(PEK_TSN_flights)
library(jsonlite)
json_data <- toJSON(PEK_TSN_flights, pretty = TRUE,force=TRUE)
writeLines(json_data, "PEK_TSN_flights.json")
PEK_TSN_flights <- read.csv("PEK_TSN_flights.csv",encoding ="UTF-8",stringsAsFactors = FALSE,header = T)
View(PEK_TSN_flights)
PEK_TSN_flights[, c(6:9)] <- sapply(PEK_TSN_flights[, c(6:9)], as.numeric)
summary(PEK_TSN_flights)
library(jsonlite)
json_data <- toJSON(PEK_TSN_flights, pretty = TRUE,force=TRUE)
writeLines(json_data, "PEK_TSN_flights.json")
# 首先找出工作目录的设置位置：
getwd()
#更改返回的路径
setwd("/Users/smg/Desktop/volat-economy-scrollmagic/data/")
#获得机场的坐标数据和2018年的中心度
Airports <- read.csv("2018_centrality.csv",encoding ="UTF-8",stringsAsFactors = FALSE,header = T)
#获得机场的坐标数据和2018年的中心度
Airports <- read.csv("2018_centrality.csv",encoding ="UTF-8",stringsAsFactors = FALSE,header = T)
View(Airports)
summary(Airports)
#坐标系变数组
library(readr)
library(dplyr)
Airports <- Airports %>% mutate(position=sprintf("[%s,%s]",airport_lng,airport_lat))
summary(Airports)
library(jsonlite)
json_data <- toJSON(Airports, pretty = TRUE,force=TRUE)
writeLines(json_data, "Airports-2018nodes.json")
#获得机场的坐标数据和2018年的中心度
Airports <- read.csv("2018_centrality.csv",encoding ="UTF-8",stringsAsFactors = FALSE,header = T)
View(Airports)
#改字段名
Airports <- rename(Airports, replace = c("airport_lat" = "latitude"))
#改字段名
Airports <- rename(Airports, replace = c("airport_lat" = "latitude"))
names(Airports) <- c("airport_lat", "latitude")
View(Airports)
#获得机场的坐标数据和2018年的中心度
Airports <- read.csv("2018_centrality.csv",encoding ="UTF-8",stringsAsFactors = FALSE,header = T)
names(Airports) <- c("airport_lat", "latitude")
#获得机场的坐标数据和2018年的中心度
Airports <- read.csv("2018_centrality.csv",encoding ="UTF-8",stringsAsFactors = FALSE,header = T)
colnames(irports)[colnames(irports)=="airport_lat"] <- "latitude"
colnames(Airports)[colnames(Airports)=="airport_lat"] <- "latitude"
View(Airports)
colnames(Airports)[colnames(Airports)=="airport_lng"] <- "longitude"
# Write CSV in R
write.csv(Airports, file = "Airports.csv")
